// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: scan.flex

import java.util.*;
import java.io.*;

@SuppressWarnings("fallthrough")
class scanBasic {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int FALLBACK = 2;
  public static final int LINECOMMENT = 4;
  public static final int BLOCKCOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\24\2\26\1\0\1\27\1\30\1\31"+
    "\1\32\2\0\6\33\24\34\1\0\1\35\1\0\1\36"+
    "\1\34\1\0\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\2\34\1\45\1\34\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\34\1\54\1\55\1\56\1\57\1\60\1\34"+
    "\1\61\1\62\1\63\1\64\1\6\1\65\7\0\1\3"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0\u0100\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\1\1\20\14\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\4\40\1\41\1\42\1\43\1\44"+
    "\12\17\1\45\2\17\1\46\4\17\1\47\2\50\3\12"+
    "\1\17\1\51\14\17\1\52\4\17\3\0\21\17\3\50"+
    "\11\17\1\53\1\54\1\55\2\17\1\56\3\17\1\57"+
    "\1\60\5\17\1\61\1\62\1\63\1\64\7\17\1\65"+
    "\1\66\1\17\1\67\1\70\1\71\1\72\1\73\1\17"+
    "\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\334\0\u0113\0\334"+
    "\0\334\0\u014a\0\u0181\0\334\0\u01b8\0\u01ef\0\u0226\0\u025d"+
    "\0\334\0\u0294\0\334\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f"+
    "\0\u0596\0\u05cd\0\u0604\0\334\0\334\0\334\0\334\0\334"+
    "\0\334\0\334\0\u063b\0\334\0\334\0\334\0\334\0\334"+
    "\0\334\0\334\0\334\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\334\0\334\0\334\0\334\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0302\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\334\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0302\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0302\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u0fe6\0\u101d\0\u1054\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u0302"+
    "\0\u0302\0\u0302\0\u1621\0\u1658\0\u0302\0\u168f\0\u16c6\0\u16fd"+
    "\0\u0302\0\u0302\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u0302"+
    "\0\u0302\0\u0302\0\u0302\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u0302\0\u0302\0\u19c8\0\u0302\0\u0302\0\u0302"+
    "\0\u0302\0\u0302\0\u19ff\0\u0302\0\u0302";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\6\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\17\7\20\1\21"+
    "\1\22\1\23\1\24\2\25\1\26\1\27\1\30\1\25"+
    "\1\31\1\32\1\25\1\33\1\34\2\25\1\35\1\36"+
    "\1\37\1\40\1\41\1\25\1\42\1\43\4\25\1\44"+
    "\1\45\1\5\67\46\2\47\1\50\2\51\61\47\1\51"+
    "\11\52\1\53\55\52\71\0\1\6\115\0\1\54\47\0"+
    "\1\55\16\0\1\56\51\0\1\57\14\0\1\60\46\0"+
    "\1\61\4\0\1\62\12\0\1\63\52\0\1\64\1\0"+
    "\10\20\4\0\2\65\2\0\1\65\1\66\1\67\17\65"+
    "\1\70\2\65\20\0\1\64\1\0\10\20\4\0\2\65"+
    "\2\0\25\65\34\0\1\71\66\0\1\72\54\0\10\25"+
    "\4\0\2\25\2\0\25\25\10\0\2\73\26\0\1\73"+
    "\2\0\1\73\3\0\1\73\4\0\1\73\2\0\1\73"+
    "\1\0\1\73\41\0\1\74\54\0\10\25\4\0\2\25"+
    "\2\0\10\25\1\75\1\25\1\76\12\25\22\0\10\25"+
    "\4\0\2\25\2\0\1\77\12\25\1\100\11\25\22\0"+
    "\10\25\4\0\2\25\2\0\4\25\1\101\1\25\1\102"+
    "\16\25\22\0\10\25\4\0\2\25\2\0\4\25\1\103"+
    "\1\25\1\104\11\25\1\105\4\25\22\0\10\25\4\0"+
    "\2\25\2\0\12\25\1\106\3\25\1\107\6\25\22\0"+
    "\10\25\4\0\2\25\2\0\13\25\1\110\11\25\22\0"+
    "\10\25\4\0\2\25\2\0\13\25\1\111\11\25\22\0"+
    "\10\25\4\0\2\25\2\0\15\25\1\112\7\25\22\0"+
    "\10\25\4\0\2\25\2\0\15\25\1\113\7\25\22\0"+
    "\10\25\4\0\2\25\2\0\4\25\1\114\20\25\22\0"+
    "\10\25\4\0\2\25\2\0\6\25\1\115\16\25\22\0"+
    "\10\25\4\0\2\25\2\0\11\25\1\116\13\25\21\0"+
    "\1\117\67\0\1\120\7\121\57\0\10\65\4\0\2\65"+
    "\2\0\25\65\22\0\2\122\6\65\4\0\2\65\2\0"+
    "\25\65\22\0\7\123\1\65\4\0\2\65\2\0\25\65"+
    "\22\0\10\124\4\0\1\124\1\65\2\0\6\124\17\65"+
    "\22\0\10\25\4\0\2\25\2\0\7\25\1\125\15\25"+
    "\22\0\10\25\4\0\2\25\2\0\3\25\1\126\21\25"+
    "\22\0\10\25\4\0\2\25\2\0\15\25\1\127\1\25"+
    "\1\130\5\25\22\0\10\25\4\0\2\25\2\0\11\25"+
    "\1\131\13\25\22\0\10\25\4\0\2\25\2\0\2\25"+
    "\1\132\22\25\22\0\10\25\4\0\2\25\2\0\16\25"+
    "\1\133\6\25\22\0\10\25\4\0\2\25\2\0\15\25"+
    "\1\134\7\25\22\0\10\25\4\0\2\25\2\0\10\25"+
    "\1\135\14\25\22\0\10\25\4\0\2\25\2\0\12\25"+
    "\1\136\12\25\22\0\10\25\4\0\2\25\2\0\4\25"+
    "\1\137\7\25\1\140\10\25\22\0\10\25\4\0\2\25"+
    "\2\0\12\25\1\141\12\25\22\0\10\25\4\0\2\25"+
    "\2\0\10\25\1\142\14\25\22\0\10\25\4\0\2\25"+
    "\2\0\17\25\1\143\5\25\22\0\10\25\4\0\2\25"+
    "\2\0\6\25\1\144\16\25\22\0\10\25\4\0\2\25"+
    "\2\0\1\145\24\25\22\0\10\25\4\0\2\25\2\0"+
    "\17\25\1\146\5\25\22\0\10\25\4\0\2\25\2\0"+
    "\13\25\1\147\11\25\22\0\10\121\11\0\1\150\1\151"+
    "\17\0\1\152\24\0\10\121\55\0\1\64\1\0\2\122"+
    "\6\65\4\0\2\65\2\0\25\65\20\0\1\64\1\0"+
    "\7\123\1\65\4\0\2\65\2\0\25\65\20\0\1\64"+
    "\1\0\10\124\4\0\1\124\1\65\2\0\6\124\17\65"+
    "\22\0\10\25\4\0\2\25\2\0\1\153\24\25\22\0"+
    "\10\25\4\0\2\25\2\0\1\25\1\154\23\25\22\0"+
    "\10\25\4\0\2\25\2\0\1\155\24\25\22\0\10\25"+
    "\4\0\2\25\2\0\14\25\1\156\10\25\22\0\10\25"+
    "\4\0\2\25\2\0\13\25\1\157\11\25\22\0\10\25"+
    "\4\0\2\25\2\0\17\25\1\160\5\25\22\0\10\25"+
    "\4\0\2\25\2\0\11\25\1\161\13\25\22\0\10\25"+
    "\4\0\2\25\2\0\17\25\1\162\5\25\22\0\10\25"+
    "\4\0\2\25\2\0\12\25\1\163\12\25\22\0\10\25"+
    "\4\0\2\25\2\0\15\25\1\164\7\25\22\0\10\25"+
    "\4\0\2\25\2\0\20\25\1\165\4\25\22\0\10\25"+
    "\4\0\2\25\2\0\13\25\1\166\11\25\22\0\10\25"+
    "\4\0\2\25\2\0\4\25\1\167\20\25\22\0\10\25"+
    "\4\0\2\25\2\0\12\25\1\170\12\25\22\0\10\25"+
    "\4\0\2\25\2\0\2\25\1\171\22\25\22\0\10\25"+
    "\4\0\2\25\2\0\15\25\1\172\7\25\22\0\10\25"+
    "\4\0\2\25\2\0\10\25\1\173\14\25\22\0\2\174"+
    "\65\0\7\175\60\0\10\176\4\0\1\176\3\0\6\176"+
    "\41\0\10\25\4\0\2\25\2\0\12\25\1\177\12\25"+
    "\22\0\10\25\4\0\2\25\2\0\13\25\1\200\11\25"+
    "\22\0\10\25\4\0\2\25\2\0\10\25\1\201\14\25"+
    "\22\0\10\25\4\0\2\25\2\0\13\25\1\202\11\25"+
    "\22\0\10\25\4\0\2\25\2\0\11\25\1\203\13\25"+
    "\22\0\10\25\4\0\2\25\2\0\6\25\1\204\16\25"+
    "\22\0\10\25\4\0\2\25\2\0\4\25\1\205\20\25"+
    "\22\0\10\25\4\0\2\25\2\0\4\25\1\206\20\25"+
    "\22\0\10\25\4\0\2\25\2\0\4\25\1\207\20\25"+
    "\22\0\10\25\4\0\2\25\2\0\17\25\1\210\5\25"+
    "\22\0\10\25\4\0\2\25\2\0\17\25\1\211\5\25"+
    "\22\0\10\25\4\0\2\25\2\0\17\25\1\212\5\25"+
    "\22\0\3\25\1\213\2\25\1\214\1\25\4\0\2\25"+
    "\2\0\25\25\22\0\10\25\4\0\2\25\2\0\17\25"+
    "\1\215\5\25\22\0\10\25\4\0\2\25\2\0\17\25"+
    "\1\216\5\25\22\0\10\25\4\0\2\25\2\0\1\217"+
    "\24\25\22\0\10\25\4\0\2\25\2\0\4\25\1\220"+
    "\20\25\22\0\10\25\4\0\2\25\2\0\4\25\1\221"+
    "\20\25\22\0\10\25\4\0\2\25\2\0\12\25\1\222"+
    "\12\25\22\0\10\25\4\0\2\25\2\0\23\25\1\223"+
    "\1\25\22\0\10\25\4\0\2\25\2\0\20\25\1\224"+
    "\4\25\22\0\10\25\4\0\2\25\2\0\14\25\1\225"+
    "\10\25\22\0\10\25\4\0\2\25\2\0\10\25\1\226"+
    "\14\25\22\0\10\25\4\0\2\25\2\0\12\25\1\227"+
    "\12\25\22\0\10\25\4\0\2\25\2\0\15\25\1\230"+
    "\7\25\22\0\10\25\4\0\2\25\2\0\10\25\1\231"+
    "\14\25\22\0\2\25\1\232\5\25\4\0\2\25\2\0"+
    "\25\25\22\0\4\25\1\233\3\25\4\0\2\25\2\0"+
    "\25\25\22\0\10\25\4\0\2\25\2\0\6\25\1\234"+
    "\16\25\22\0\10\25\4\0\2\25\2\0\17\25\1\235"+
    "\5\25\22\0\3\25\1\236\2\25\1\237\1\25\4\0"+
    "\2\25\2\0\25\25\22\0\10\25\4\0\2\25\2\0"+
    "\24\25\1\240\22\0\10\25\4\0\2\25\2\0\12\25"+
    "\1\241\12\25\22\0\10\25\4\0\2\25\2\0\13\25"+
    "\1\242\11\25\22\0\10\25\4\0\2\25\2\0\10\25"+
    "\1\243\14\25\22\0\10\25\4\0\2\25\2\0\17\25"+
    "\1\244\5\25\22\0\10\25\4\0\2\25\2\0\21\25"+
    "\1\245\3\25\22\0\10\25\4\0\2\25\2\0\4\25"+
    "\1\246\20\25\22\0\2\25\1\247\5\25\4\0\2\25"+
    "\2\0\25\25\22\0\4\25\1\250\3\25\4\0\2\25"+
    "\2\0\25\25\22\0\10\25\4\0\2\25\2\0\4\25"+
    "\1\251\20\25\22\0\10\25\4\0\2\25\2\0\3\25"+
    "\1\252\21\25\22\0\10\25\4\0\2\25\2\0\16\25"+
    "\1\253\6\25\22\0\10\25\4\0\2\25\2\0\4\25"+
    "\1\254\20\25\22\0\10\25\4\0\2\25\2\0\4\25"+
    "\1\255\20\25\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6710];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\1\1\2\11\2\1\1\11\4\1\1\11"+
    "\1\1\1\11\20\1\7\11\1\1\10\11\1\0\4\1"+
    "\4\11\22\1\1\11\30\1\3\0\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayList<String> tokens = new ArrayList<String>();
    
    public String output = "";
    
    private void readTokens(String file){
        // Get tokens list from file
        try {
            Scanner s = new Scanner(new File(file));
            while (s.hasNext()){
                tokens.add(s.next());
            }
            s.close();
        } catch(IOException e) {
            System.out.println("IO ERR!");
            e.printStackTrace();
        }
    }

    {
        readTokens("tokenList.txt");
        System.out.println("\nTokens List: " + tokens + "\n\n");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanBasic(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.println(output);
    System.out.println("\n\nTokens List: " + tokens + "\n");

    // initialize output file
    try {
        File outFile = new File("output.txt");
        if (outFile.createNewFile()){
            System.out.println("File created: " + outFile.getName());
        } else {
            System.out.println("File already exists... Overwriting.");
        }

        // write to file
        FileWriter writer = new FileWriter(outFile);
        writer.write(output);
        writer.write("\n\nTokens List: \n");
        for (String token : tokens)
            writer.write(token + "\n");
        writer.close();
    } catch (IOException e) {
            System.out.println("IO ERR!");
            e.printStackTrace();
    }
        
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FALLBACK);
            }
          // fall through
          case 62: break;
          case 2:
            { output += yytext();
            }
          // fall through
          case 63: break;
          case 3:
            { output += tokens.get(44);
            }
          // fall through
          case 64: break;
          case 4:
            { output += tokens.get(45);
            }
          // fall through
          case 65: break;
          case 5:
            { output += tokens.get(27);
            }
          // fall through
          case 66: break;
          case 6:
            { output += tokens.get(25);
            }
          // fall through
          case 67: break;
          case 7:
            { output += tokens.get(42);
            }
          // fall through
          case 68: break;
          case 8:
            { output += tokens.get(26);
            }
          // fall through
          case 69: break;
          case 9:
            { output += tokens.get(28);
            }
          // fall through
          case 70: break;
          case 10:
            { tokens.add(yytext()); output += tokens.get(23) + "(" + tokens.get(tokens.size()-1) +")";
            }
          // fall through
          case 71: break;
          case 11:
            { output += tokens.get(43);
            }
          // fall through
          case 72: break;
          case 12:
            { output += tokens.get(38);
            }
          // fall through
          case 73: break;
          case 13:
            { output += tokens.get(32);
            }
          // fall through
          case 74: break;
          case 14:
            { output += tokens.get(39);
            }
          // fall through
          case 75: break;
          case 15:
            { if (tokens.contains(yytext())){
                            output += tokens.get(24) + "(" + tokens.get(tokens.indexOf(yytext())) +")";
                        }else{
                            tokens.add(yytext());
                            output += tokens.get(24) + "(" + tokens.get(tokens.size()-1) +")";
                        }
            }
          // fall through
          case 76: break;
          case 16:
            { output += tokens.get(29);
            }
          // fall through
          case 77: break;
          case 17:
            { output += tokens.get(46);
            }
          // fall through
          case 78: break;
          case 18:
            { output += tokens.get(47);
            }
          // fall through
          case 79: break;
          case 19:
            { output += "unrecognized: \"" + yytext() + "\" at line " + yyline + " ";
            }
          // fall through
          case 80: break;
          case 20:
            { /* ignore everything in this line except newlines*/
            }
          // fall through
          case 81: break;
          case 21:
            { yybegin(YYINITIAL); output += yytext();
            }
          // fall through
          case 82: break;
          case 22:
            { System.out.print(yytext());
            }
          // fall through
          case 83: break;
          case 23:
            { /* ignore everything in this line including newlines*/
            }
          // fall through
          case 84: break;
          case 24:
            { output += tokens.get(35);
            }
          // fall through
          case 85: break;
          case 25:
            { output += tokens.get(31);
            }
          // fall through
          case 86: break;
          case 26:
            { output += tokens.get(33);
            }
          // fall through
          case 87: break;
          case 27:
            { output += tokens.get(30);
            }
          // fall through
          case 88: break;
          case 28:
            { output += tokens.get(34);
            }
          // fall through
          case 89: break;
          case 29:
            { yybegin(BLOCKCOMMENT); output += tokens.get(50) + " ";
            }
          // fall through
          case 90: break;
          case 30:
            { yybegin(LINECOMMENT); output += tokens.get(49);
            }
          // fall through
          case 91: break;
          case 31:
            { output += tokens.get(36);
            }
          // fall through
          case 92: break;
          case 32:
            { output += "!!! Invalid ID \"" + yytext() + "\" at line " + yyline + " !!!";
            }
          // fall through
          case 93: break;
          case 33:
            { output += tokens.get(40);
            }
          // fall through
          case 94: break;
          case 34:
            { output += tokens.get(41);
            }
          // fall through
          case 95: break;
          case 35:
            { output += tokens.get(48);
            }
          // fall through
          case 96: break;
          case 36:
            { output += tokens.get(37);
            }
          // fall through
          case 97: break;
          case 37:
            { output += tokens.get(15);
            }
          // fall through
          case 98: break;
          case 38:
            { output += tokens.get(13);
            }
          // fall through
          case 99: break;
          case 39:
            { yybegin(YYINITIAL); output += tokens.get(51) + "\n";
            }
          // fall through
          case 100: break;
          case 40:
            { output += "!!! Invalid NUMLIT \"" + yytext() + "\" at line " + yyline + " !!!";
            }
          // fall through
          case 101: break;
          case 41:
            { output += tokens.get(12);
            }
          // fall through
          case 102: break;
          case 42:
            { output += tokens.get(14);
            }
          // fall through
          case 103: break;
          case 43:
            { output += tokens.get(1);
            }
          // fall through
          case 104: break;
          case 44:
            { output += tokens.get(10);
            }
          // fall through
          case 105: break;
          case 45:
            { output += tokens.get(16);
            }
          // fall through
          case 106: break;
          case 46:
            { output += tokens.get(11);
            }
          // fall through
          case 107: break;
          case 47:
            { output += tokens.get(8);
            }
          // fall through
          case 108: break;
          case 48:
            { output += tokens.get(7);
            }
          // fall through
          case 109: break;
          case 49:
            { output += tokens.get(18);
            }
          // fall through
          case 110: break;
          case 50:
            { output += tokens.get(17);
            }
          // fall through
          case 111: break;
          case 51:
            { output += tokens.get(2);
            }
          // fall through
          case 112: break;
          case 52:
            { output += tokens.get(3);
            }
          // fall through
          case 113: break;
          case 53:
            { output += tokens.get(21);
            }
          // fall through
          case 114: break;
          case 54:
            { output += tokens.get(22);
            }
          // fall through
          case 115: break;
          case 55:
            { output += tokens.get(20);
            }
          // fall through
          case 116: break;
          case 56:
            { output += tokens.get(4);
            }
          // fall through
          case 117: break;
          case 57:
            { output += tokens.get(5);
            }
          // fall through
          case 118: break;
          case 58:
            { output += tokens.get(19);
            }
          // fall through
          case 119: break;
          case 59:
            { output += tokens.get(6);
            }
          // fall through
          case 120: break;
          case 60:
            { output += tokens.get(0);
            }
          // fall through
          case 121: break;
          case 61:
            { output += tokens.get(9);
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanBasic [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scanBasic scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scanBasic(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
